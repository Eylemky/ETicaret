// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ETicaretDAL.Migrations
{
    [DbContext(typeof(WebDbContext))]
    partial class WebDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.Property<int>("CategoriesCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesCategoryId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("ProductCategory", (string)null);
                });

            modelBuilder.Entity("ETicaretEntity.Entities.Concrete.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("AddressDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            AddressId = 1,
                            AddressDescription = "Barış Caddesi, Sümbül Sokağı, Kuş Apartmanı No:34 / Daire:4",
                            AddressLine = "Home",
                            City = "İstanbul",
                            State = "Kadıköy",
                            UserId = 1
                        },
                        new
                        {
                            AddressId = 2,
                            AddressDescription = "Çağla Mahallesi, Martı Apartmanı No:21 Daire:8",
                            AddressLine = "Annemler",
                            City = "Samsun",
                            State = "Mustafakemalpaşa",
                            UserId = 5
                        },
                        new
                        {
                            AddressId = 3,
                            AddressDescription = "Yaşar Sokak, Sarnış Apt. No:6 Daire:1",
                            AddressLine = "Evim",
                            City = "İzmir",
                            State = "Karşıyaka",
                            UserId = 3
                        },
                        new
                        {
                            AddressId = 4,
                            AddressDescription = "Atatürk Mahallesi, Savaş Sokak, Cumhuriyet Apt. No:18 Daire:3",
                            AddressLine = "Office",
                            City = "İstanbul",
                            State = "Maltepe",
                            UserId = 2
                        },
                        new
                        {
                            AddressId = 5,
                            AddressDescription = "Sarıca  Mh. , Pervane Sokak, Özdemir Sitesi G Blok Daire:13",
                            AddressLine = "IlkEvim",
                            City = "Ankara",
                            State = "Çankaya",
                            UserId = 4
                        });
                });

            modelBuilder.Entity("ETicaretEntity.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Elbise",
                            Description = "Kadın ve Kız Çocuk Giyim"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Etek",
                            Description = "Kadın ve Kız Çocuk Giyim"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Mont",
                            Description = "Kadın, Erkek ve Kız Çocuk, Erkek Çocuk giyim"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "T-Shirt",
                            Description = "Yazlık kaliteli Kadın, Erkek ve Kız Çocuk, Erkek Çocuk giyim"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Kazak",
                            Description = "Kışlık kaliteli Kadın, Erkek ve Kız Çocuk, Erkek Çocuk giyim"
                        },
                        new
                        {
                            CategoryId = 6,
                            CategoryName = "Pantolon",
                            Description = "Mevsimlik kaliteli Kadın, Erkek ve Kız Çocuk, Erkek Çocuk giyim"
                        },
                        new
                        {
                            CategoryId = 7,
                            CategoryName = "Gömlek",
                            Description = "Mevsimlik kaliteli Kadın, Erkek ve Kız Çocuk, Erkek Çocuk giyim"
                        },
                        new
                        {
                            CategoryId = 8,
                            CategoryName = "Gözlük",
                            Description = "Aksesuar"
                        },
                        new
                        {
                            CategoryId = 9,
                            CategoryName = "Flor",
                            Description = "Aksesuar"
                        },
                        new
                        {
                            CategoryId = 10,
                            CategoryName = "Abiye Çanta",
                            Description = "Çanta"
                        },
                        new
                        {
                            CategoryId = 11,
                            CategoryName = " Günlük Çanta",
                            Description = "Çanta"
                        },
                        new
                        {
                            CategoryId = 12,
                            CategoryName = "Sırt Çantası",
                            Description = "Çanta"
                        });
                });

            modelBuilder.Entity("ETicaretEntity.Entities.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateOnly?>("RequiredDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ShippedDate")
                        .HasColumnType("date");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateOnly(2024, 6, 5),
                            OrderStatusId = 1,
                            PaymentMethod = "Card",
                            RequiredDate = new DateOnly(2024, 6, 10),
                            ShippedDate = new DateOnly(2024, 6, 8),
                            ShippingAddress = "Barış Caddesi, Sümbül Sokağı, Kuş Apartmanı No:34 / Daire:4",
                            Status = "Pending",
                            TotalAmount = 250m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateOnly(2024, 10, 18),
                            OrderStatusId = 2,
                            PaymentMethod = "CreditCard",
                            RequiredDate = new DateOnly(2024, 10, 22),
                            ShippedDate = new DateOnly(2024, 10, 20),
                            ShippingAddress = "Çağla Mahallesi, Martı Apartmanı No:21 Daire:8",
                            Status = "Completed",
                            TotalAmount = 250m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateOnly(2024, 4, 30),
                            OrderStatusId = 3,
                            PaymentMethod = "CreditCard",
                            RequiredDate = new DateOnly(2024, 5, 4),
                            ShippedDate = new DateOnly(2024, 5, 3),
                            ShippingAddress = "Yaşar Sokak, Sarnış Apt. No:6 Daire:1",
                            Status = "Canceled",
                            TotalAmount = 250m,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("ETicaretEntity.Entities.Concrete.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            OrderDetailId = 1,
                            OrderId = 1,
                            ProductId = 1,
                            Quantity = 1,
                            UnitPrice = 200m
                        },
                        new
                        {
                            OrderDetailId = 2,
                            OrderId = 2,
                            ProductId = 2,
                            Quantity = 4,
                            UnitPrice = 300m
                        });
                });

            modelBuilder.Entity("ETicaretEntity.Entities.Concrete.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderStatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OrderStatusId");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new
                        {
                            OrderStatusId = 1,
                            StatusName = "Pending"
                        },
                        new
                        {
                            OrderStatusId = 2,
                            StatusName = "Completed"
                        },
                        new
                        {
                            OrderStatusId = 3,
                            StatusName = "Canceled"
                        });
                });

            modelBuilder.Entity("ETicaretEntity.Entities.Concrete.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaymentId");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            PaymentId = 1,
                            Amount = 150.50m,
                            IsSuccessful = true,
                            OrderId = 1,
                            PaymentDate = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "CreditCard"
                        },
                        new
                        {
                            PaymentId = 2,
                            Amount = 200.00m,
                            IsSuccessful = true,
                            OrderId = 2,
                            PaymentDate = new DateTime(2023, 12, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "PayPal"
                        },
                        new
                        {
                            PaymentId = 3,
                            Amount = 99.99m,
                            IsSuccessful = false,
                            OrderId = 3,
                            PaymentDate = new DateTime(2023, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "BankTransfer"
                        });
                });

            modelBuilder.Entity("ETicaretEntity.Entities.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 5,
                            CreatedDate = new DateTime(2024, 12, 31, 18, 48, 33, 123, DateTimeKind.Local).AddTicks(8389),
                            Description = "%100 Pamuk kazak",
                            IsActive = true,
                            Name = "Triko Kazak",
                            Price = 200m,
                            Stock = 243,
                            UpdatedDate = new DateTime(2024, 12, 31, 18, 48, 33, 123, DateTimeKind.Local).AddTicks(8390)
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2024, 12, 31, 18, 48, 33, 123, DateTimeKind.Local).AddTicks(8393),
                            Description = "Müslim kumaş mevsimlik",
                            IsActive = true,
                            Name = " Elbise",
                            Price = 460m,
                            Stock = 243,
                            UpdatedDate = new DateTime(2024, 12, 31, 18, 48, 33, 123, DateTimeKind.Local).AddTicks(8394)
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 4,
                            CreatedDate = new DateTime(2024, 12, 31, 18, 48, 33, 123, DateTimeKind.Local).AddTicks(8396),
                            Description = "Mevsimlik",
                            IsActive = true,
                            Name = " T-Shirt",
                            Price = 347m,
                            Stock = 243,
                            UpdatedDate = new DateTime(2024, 12, 31, 18, 48, 33, 123, DateTimeKind.Local).AddTicks(8396)
                        });
                });

            modelBuilder.Entity("ETicaretEntity.Entities.Concrete.ProductImage", b =>
                {
                    b.Property<int>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductImageId"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("ETicaretEntity.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Customer"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Admin"
                        });
                });

            modelBuilder.Entity("ETicaretEntity.Entities.Concrete.SiteSetting", b =>
                {
                    b.Property<int>("SiteSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SiteSettingId"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("SiteSettingId");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasDatabaseName("IX_SiteSettings_Key");

                    b.ToTable("SiteSettings");

                    b.HasData(
                        new
                        {
                            SiteSettingId = 1,
                            Key = "SiteTitle",
                            Value = "My E-Store Website"
                        },
                        new
                        {
                            SiteSettingId = 2,
                            Key = "SiteDescription",
                            Value = "The best e-store platform to meet all your needs!"
                        },
                        new
                        {
                            SiteSettingId = 3,
                            Key = "ContactEmail",
                            Value = "support@myestore.com"
                        },
                        new
                        {
                            SiteSettingId = 4,
                            Key = "ContactPhone",
                            Value = "0 850 444 8 444"
                        },
                        new
                        {
                            SiteSettingId = 5,
                            Key = "DefaultCurrency",
                            Value = "USD"
                        });
                });

            modelBuilder.Entity("ETicaretEntity.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 12, 31, 18, 48, 33, 123, DateTimeKind.Local).AddTicks(8706),
                            Email = "felixruntenten@gmail.com",
                            IsActive = true,
                            Name = "Felix",
                            PasswordHash = "qweasd",
                            PhoneNumber = "+90 555 333 55 33",
                            RoleId = 1,
                            Surname = "Runtenten",
                            UpdatedDate = new DateTime(2024, 12, 31, 18, 48, 33, 123, DateTimeKind.Local).AddTicks(8707)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 12, 31, 18, 48, 33, 123, DateTimeKind.Local).AddTicks(8709),
                            Email = "fahri_feneroğlu@gmail.com",
                            IsActive = true,
                            Name = "Fahri",
                            PasswordHash = "qweasd1",
                            PhoneNumber = "+90 535 555 35 44",
                            RoleId = 1,
                            Surname = "Feneroğlu",
                            UpdatedDate = new DateTime(2024, 12, 31, 18, 48, 33, 123, DateTimeKind.Local).AddTicks(8710)
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 12, 31, 18, 48, 33, 123, DateTimeKind.Local).AddTicks(8712),
                            Email = "iremozyurt@gmail.com",
                            IsActive = true,
                            Name = "İrem",
                            PasswordHash = "qweasd2",
                            PhoneNumber = "+90 555 444 22 34",
                            RoleId = 1,
                            Surname = "Çelik",
                            UpdatedDate = new DateTime(2024, 12, 31, 18, 48, 33, 123, DateTimeKind.Local).AddTicks(8712)
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 12, 31, 18, 48, 33, 123, DateTimeKind.Local).AddTicks(8714),
                            Email = "ademdonmez@gmail.com",
                            IsActive = true,
                            Name = "Adem",
                            PasswordHash = "qweasd3",
                            PhoneNumber = "+90 532 625 54 34",
                            RoleId = 1,
                            Surname = "Donmez",
                            UpdatedDate = new DateTime(2024, 12, 31, 18, 48, 33, 123, DateTimeKind.Local).AddTicks(8715)
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 12, 31, 18, 48, 33, 123, DateTimeKind.Local).AddTicks(8717),
                            Email = "jush_hutcersen@gmail.com",
                            IsActive = true,
                            Name = "Jush",
                            PasswordHash = "qweasd4",
                            PhoneNumber = "+90 555 435 33 55",
                            RoleId = 1,
                            Surname = "Hutcerson",
                            UpdatedDate = new DateTime(2024, 12, 31, 18, 48, 33, 123, DateTimeKind.Local).AddTicks(8717)
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 12, 31, 18, 48, 33, 123, DateTimeKind.Local).AddTicks(8719),
                            Email = "eylemdonmez@admin.com",
                            IsActive = true,
                            Name = "Eylem",
                            PasswordHash = "qweasdadmin",
                            PhoneNumber = "+90 555 465 88 22",
                            RoleId = 2,
                            Surname = "Kaya Donmez",
                            UpdatedDate = new DateTime(2024, 12, 31, 18, 48, 33, 123, DateTimeKind.Local).AddTicks(8720)
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 12, 31, 18, 48, 33, 123, DateTimeKind.Local).AddTicks(8722),
                            Email = "ercanozturk@admin.com",
                            IsActive = true,
                            Name = "Ercan",
                            PasswordHash = "qweasdpro",
                            PhoneNumber = "+90 555 425 55 24",
                            RoleId = 2,
                            Surname = "Öztürk",
                            UpdatedDate = new DateTime(2024, 12, 31, 18, 48, 33, 123, DateTimeKind.Local).AddTicks(8722)
                        });
                });

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.HasOne("ETicaretEntity.Entities.Concrete.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETicaretEntity.Entities.Concrete.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ETicaretEntity.Entities.Concrete.Address", b =>
                {
                    b.HasOne("ETicaretEntity.Entities.Concrete.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ETicaretEntity.Entities.Concrete.Order", b =>
                {
                    b.HasOne("ETicaretEntity.Entities.Concrete.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ETicaretEntity.Entities.Concrete.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ETicaretEntity.Entities.Concrete.OrderDetail", b =>
                {
                    b.HasOne("ETicaretEntity.Entities.Concrete.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETicaretEntity.Entities.Concrete.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ETicaretEntity.Entities.Concrete.Payment", b =>
                {
                    b.HasOne("ETicaretEntity.Entities.Concrete.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ETicaretEntity.Entities.Concrete.ProductImage", b =>
                {
                    b.HasOne("ETicaretEntity.Entities.Concrete.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ETicaretEntity.Entities.Concrete.User", b =>
                {
                    b.HasOne("ETicaretEntity.Entities.Concrete.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ETicaretEntity.Entities.Concrete.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("ETicaretEntity.Entities.Concrete.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ETicaretEntity.Entities.Concrete.Product", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("ETicaretEntity.Entities.Concrete.Role", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("ETicaretEntity.Entities.Concrete.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
